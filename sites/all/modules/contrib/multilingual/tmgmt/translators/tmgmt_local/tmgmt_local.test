<?php

/**
 * @file
 * Test cases for the local translator module.
 */

/**
 * Basic tests for the local translator.
 */
class TMGMTLocalTestCase extends TMGMTBaseTestCase {

  /**
   * Translator user.
   *
   * @var object
   */
  protected $local_translator;

  protected $local_translator_permissions = array(
    'provide translation services',
    'use Rules component rules_tmgmt_local_task_assign_to_me',
    'use Rules component rules_tmgmt_local_task_unassign',
  );

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Local Translator tests'),
      'description' => t('Tests the local translator plugin integration.'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_local', 'tmgmt_ui', 'tmgmt_skills'));
    $this->loginAsAdmin();
    $this->setEnvironment('de');

    $this->local_translator = $this->drupalCreateUser($this->local_translator_permissions);

  }

  function testTranslatorSkillsForTasks() {

    $this->setEnvironment('fr');

    $translator1 = $this->drupalCreateUser($this->local_translator_permissions);
    $this->drupalLogin($translator1);
    $edit = array(
      'tmgmt_translation_skills[und][0][language_from]' => 'en',
      'tmgmt_translation_skills[und][0][language_to]' => 'de',
    );
    $this->drupalPost('user/' . $translator1->uid . '/edit', $edit, t('Save'));

    $translator2 = $this->drupalCreateUser($this->local_translator_permissions);
    $this->drupalLogin($translator2);
    $edit = array(
      'tmgmt_translation_skills[und][0][language_from]' => 'en',
      'tmgmt_translation_skills[und][0][language_to]' => 'de',
    );
    $this->drupalPost('user/' . $translator2->uid . '/edit', $edit, t('Save'));
    $edit = array(
      'tmgmt_translation_skills[und][1][language_from]' => 'de',
      'tmgmt_translation_skills[und][1][language_to]' => 'en',
    );
    $this->drupalPost('user/' . $translator2->uid . '/edit', $edit, t('Save'));

    $translator3 = $this->drupalCreateUser($this->local_translator_permissions);
    $this->drupalLogin($translator3);
    $edit = array(
      'tmgmt_translation_skills[und][0][language_from]' => 'en',
      'tmgmt_translation_skills[und][0][language_to]' => 'de',
    );
    $this->drupalPost('user/' . $translator3->uid . '/edit', $edit, t('Save'));
    $edit = array(
      'tmgmt_translation_skills[und][1][language_from]' => 'de',
      'tmgmt_translation_skills[und][1][language_to]' => 'en',
    );
    $this->drupalPost('user/' . $translator3->uid . '/edit', $edit, t('Save'));
    $edit = array(
      'tmgmt_translation_skills[und][2][language_from]' => 'en',
      'tmgmt_translation_skills[und][2][language_to]' => 'fr',
    );
    $this->drupalPost('user/' . $translator3->uid . '/edit', $edit, t('Save'));


    $job1 = $this->createJob('en', 'de');
    $job2 = $this->createJob('de', 'en');
    $job3 = $this->createJob('en', 'fr');

    $local_task1 = tmgmt_local_task_create(array(
      'uid' => $job1->uid,
      'tjid' => $job1->tjid,
      'title' => 'Task 1',
    ));
    $local_task1->save();

    $local_task2 = tmgmt_local_task_create(array(
      'uid' => $job2->uid,
      'tjid' => $job2->tjid,
      'title' => 'Task 2',
    ));
    $local_task2->save();

    $local_task3 = tmgmt_local_task_create(array(
      'uid' => $job3->uid,
      'tjid' => $job3->tjid,
      'title' => 'Task 3',
    ));
    $local_task3->save();

    // Test languages involved in tasks.
    $this->assertEqual(
      tmgmt_local_tasks_languages(array($local_task1->tltid, $local_task2->tltid, $local_task3->tltid)),
      array(
        'en' => array('de', 'fr'),
        'de' => array('en'),
      )
    );

    // Test available translators for task en - de.
    $this->assertEqual(
      tmgmt_local_get_translators_for_tasks(array($local_task1->tltid)),
      array(
        $translator1->uid => entity_label('user', $translator1),
        $translator2->uid => entity_label('user', $translator2),
        $translator3->uid => entity_label('user', $translator3),
      )
    );

    // Test available translators for tasks en - de, de - en.
    $this->assertEqual(
      tmgmt_local_get_translators_for_tasks(array($local_task1->tltid, $local_task2->tltid)),
      array(
        $translator2->uid => entity_label('user', $translator2),
        $translator3->uid => entity_label('user', $translator3),
      )
    );

    // Test available translators for tasks en - de, de - en, en - fr.
    $this->assertEqual(
      tmgmt_local_get_translators_for_tasks(array($local_task1->tltid, $local_task2->tltid, $local_task3->tltid)),
      array(
        $translator3->uid => entity_label('user', $translator3),
      )
    );
  }

  /**
   * Test the basic translation workflow
   */
  function testBasicWorkflow() {
    $translator = tmgmt_translator_load('local');

    // Create a job and request a local translation.
    $this->loginAsTranslator();
    $job = $this->createJob();
    $job->translator = $translator->name;
    $job->settings['job_comment'] = $job_comment = 'Dummy job comment';
    $job->addItem('test_source', 'test', '1');
    $job->addItem('test_source', 'test', '2');

    // Create another local translator with the required capabilities.
    $other_translator_same = $this->drupalCreateUser($this->local_translator_permissions);
    $this->drupalLogin($other_translator_same);
    // Configure language capabilities.
    $edit = array(
      'tmgmt_translation_skills[und][0][language_from]' => 'en',
      'tmgmt_translation_skills[und][0][language_to]' => 'de',
    );
    $this->drupalPost('user/' . $other_translator_same->uid . '/edit', $edit, t('Save'));

    // Check that the user is not listed in the translator selection form.
    $uri = $job->uri();
    $this->loginAsAdmin();
    $this->drupalGet($uri['path']);
    $this->assertText(t('Select translator for this job'));
    $this->assertText($other_translator_same->name);
    $this->assertNoText($this->local_translator->name);

    $this->drupalLogin($this->local_translator);
    // Configure language capabilities.
    $edit = array(
      'tmgmt_translation_skills[und][0][language_from]' => 'en',
      'tmgmt_translation_skills[und][0][language_to]' => 'de',
    );
    $this->drupalPost('user/' . $this->local_translator->uid . '/edit', $edit, t('Save'));

    // Check that the translator is now listed.
    $this->loginAsAdmin();
    $this->drupalGet($uri['path']);
    $this->assertText($this->local_translator->name);

    $job->requestTranslation();

    // Test for job comment in the job checkout info pane.
    $uri = $job->uri();
    $this->drupalGet($uri['path']);
    $this->assertText($job_comment);

    $this->drupalLogin($this->local_translator);

    // Create a second local translator with different language capabilities,
    // make sure that he does not see the task.
    $other_translator = $this->drupalCreateUser($this->local_translator_permissions);
    $this->drupalLogin($other_translator);
    // Configure language capabilities.
    $edit = array(
      'tmgmt_translation_skills[und][0][language_from]' => 'de',
      'tmgmt_translation_skills[und][0][language_to]' => 'en',
    );
    $this->drupalPost('user/' . $other_translator->uid . '/edit', $edit, t('Save'));
    $this->drupalGet('translate');
    $this->assertNoText(t('Task for @job', array('@job' => $job->label())));

    $this->drupalLogin($this->local_translator);

    // Check the translate overview.
    $this->drupalGet('translate');
    $this->assertText(t('Task for @job', array('@job' => $job->label())));
    // @todo: Fails, encoding problem?
    //$this->assertText(t('@from => @to', array('@from' => 'en', '@to' => 'de')));
    $this->clickLink(t('assign'));

    // Log in with the translator with the same capabilities, make sure that he
    // does not see the assigned task.
    $this->drupalLogin($other_translator_same);
    $this->drupalGet('translate');
    $this->assertNoText(t('Task for @job', array('@job' => $job->label())));

    $this->drupalLogin($this->local_translator);

    // @todo: Assign bulk action missing, permission problem?
    /*$edit = array(
      'views_bulk_operations[0]' => $job->tjid,
    );
    $this->drupalPost(NULL, $edit, t('Assign to me'));*/

    // Translate the task.
    $this->drupalGet('translate');
    $this->clickLink(t('translate'));
    $this->assertText(t('Translation for @source', array('@source' => 'test_source:test:1')));
    $this->assertText(t('Translation for @source', array('@source' => 'test_source:test:2')));

    // Translate the first item.
    $this->clickLink(t('translate'));

    $this->assertText(t('Dummy'));
    // Job comment is present in the translate tool as well.
    $this->assertText($job_comment);
    // @todo: Improve title.
    $this->assertText(t('Translate Task Item'));

    // Try to complete a translation when translations are missing.
    $this->drupalPost(NULL, array(), t('Save as completed'));
    $this->assertText(t('Missing translation.'));

    $edit = array(
      'dummy|deep_nesting[translation]' => $translation1 = 'German translation of source 1',
    );
    $this->drupalPost(NULL, $edit, t('Save as completed'));

    // The first item should be accepted now, the second still in progress.
    $this->assertText(t('Accepted'));
    $this->assertText(t('In progress'));

    // Translate the second item but do not accept it yet.
    $this->clickLink(t('translate'));
    $edit = array(
      'dummy|deep_nesting[translation]' => $translation2 = 'German translation of source 2',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    // The first item should be accepted now, the second still in progress.
    $this->assertText(t('Accepted'));
    $this->assertText(t('In progress'));

    // Check the overview page, the task should still show in progress.
    $this->drupalGet('translate');
    $this->assertText(t('Pending'));

    // Mark the second item as completed now.
    $this->clickLink(t('translate'));
    $this->clickLink(t('translate'));
    $this->drupalPost(NULL, array(), t('Save as completed'));
    // Both items should be accepted now.
    $this->assertText(t('Accepted'));
    $this->assertNoText(t('In progress'));

    // Check the overview, the task should be completed now.
    $this->drupalGet('translate');
    // @todo: Should completed task be removed automatically from my tasks?
    // @todo: Maybe change status to Accepted by client or similar after job has
    //   been marked as finished.
    $this->assertText(t('Completed'));

    entity_get_controller('tmgmt_job')->resetCache(array($job->tjid));
    entity_get_controller('tmgmt_job_item')->resetCache();
    $job = tmgmt_job_load($job->tjid);
    list($item1, $item2) = array_values($job->getItems());
    // Job was accepted and finished automatically due to the default approve
    // setting.
    $this->assertTrue($job->isFinished());
    $this->assertEqual($item1->getData(array('dummy', 'deep_nesting', '#translation', '#text')), $translation1);
    $this->assertEqual($item2->getData(array('dummy', 'deep_nesting', '#translation', '#text')), $translation2);
  }

  /**
   * Test the allow all setting.
   */
  function testAllowAll() {
    $translator = tmgmt_translator_load('local');

    // Create a job and request a local translation.
    $this->loginAsTranslator();
    $job = $this->createJob();
    $job->translator = $translator->name;
    $job->addItem('test_source', 'test', '1');
    $job->addItem('test_source', 'test', '2');

    $this->assertFalse($job->requestTranslation(), 'Translation request was denied.');

    // Now enable the setting.
    $translator->settings['allow_all'] = TRUE;
    $translator->save();

    $this->assertIdentical(NULL, $job->requestTranslation(), 'Translation request was successfull');
    $this->assertTrue($job->isActive());
  }
}
